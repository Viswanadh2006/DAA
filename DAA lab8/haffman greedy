#include <stdio.h>
#include <stdlib.h>

struct Node {
    char ch;
    int freq;
    struct Node *left, *right;
};

struct Node* newNode(char ch, int freq) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->ch = ch;
    node->freq = freq;
    node->left = node->right = NULL;
    return node;
}

void swap(struct Node** a, struct Node** b) {
    struct Node* t = *a;
    *a = *b;
    *b = t;
}

struct MinHeap {
    int size;
    int capacity;
    struct Node** array;
};

struct MinHeap* createMinHeap(int capacity) {
    struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (struct Node**)malloc(capacity * sizeof(struct Node*));
    return minHeap;
}

void minHeapify(struct MinHeap* minHeap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < minHeap->size &&
       (minHeap->array[left]->freq < minHeap->array[smallest]->freq ||
       (minHeap->array[left]->freq == minHeap->array[smallest]->freq &&
        minHeap->array[left]->ch < minHeap->array[smallest]->ch)))
        smallest = left;

    if (right < minHeap->size &&
       (minHeap->array[right]->freq < minHeap->array[smallest]->freq ||
       (minHeap->array[right]->freq == minHeap->array[smallest]->freq &&
        minHeap->array[right]->ch < minHeap->array[smallest]->ch)))
        smallest = right;

    if (smallest != idx) {
        swap(&minHeap->array[smallest], &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
}

struct Node* extractMin(struct MinHeap* minHeap) {
    struct Node* temp = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    minHeap->size--;
    minHeapify(minHeap, 0);
    return temp;
}

void insertMinHeap(struct MinHeap* minHeap, struct Node* node) {
    int i = minHeap->size;
    minHeap->array[i] = node;
    minHeap->size++;

    while (i && (minHeap->array[i]->freq < minHeap->array[(i - 1) / 2]->freq ||
          (minHeap->array[i]->freq == minHeap->array[(i - 1) / 2]->freq &&
           minHeap->array[i]->ch < minHeap->array[(i - 1) / 2]->ch))) {
        swap(&minHeap->array[i], &minHeap->array[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

struct Node* buildHuffman(char chars[], int freq[], int n) {
    struct MinHeap* minHeap = createMinHeap(n);
    for (int i = 0; i < n; i++)
        insertMinHeap(minHeap, newNode(chars[i], freq[i]));

    while (minHeap->size > 1) {
        struct Node* left = extractMin(minHeap);
        struct Node* right = extractMin(minHeap);
        struct Node* top = newNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;
        insertMinHeap(minHeap, top);
    }
    return extractMin(minHeap);
}

void printCodes(struct Node* root, int arr[], int top) {
    if (root->left) {
        arr[top] = 0;
        printCodes(root->left, arr, top + 1);
    }
    if (root->right) {
        arr[top] = 1;
        printCodes(root->right, arr, top + 1);
    }
    if (!root->left && !root->right) {
        printf("%c: ", root->ch);
        for (int i = 0; i < top; i++)
            printf("%d", arr[i]);
        printf("\n");
    }
}

int main() {
    int n;
    printf("Enter number of characters: ");
    scanf("%d", &n);

    char chars[n];
    int freq[n];
    printf("Enter characters: ");
    for (int i = 0; i < n; i++) scanf(" %c", &chars[i]);
    printf("Enter frequencies: ");
    for (int i = 0; i < n; i++) scanf("%d", &freq[i]);

    struct Node* root = buildHuffman(chars, freq, n);

    int arr[100], top = 0;
    printf("Huffman Codes:\n");
    printCodes(root, arr, top);

    return 0;
}
